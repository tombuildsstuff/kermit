package network

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
    "github.com/Azure/go-autorest/autorest/validation"
)

// VirtualApplianceConnectionsClient is the network Client
type VirtualApplianceConnectionsClient struct {
    BaseClient
}
// NewVirtualApplianceConnectionsClient creates an instance of the VirtualApplianceConnectionsClient client.
func NewVirtualApplianceConnectionsClient(subscriptionID string) VirtualApplianceConnectionsClient {
    return NewVirtualApplianceConnectionsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewVirtualApplianceConnectionsClientWithBaseURI creates an instance of the VirtualApplianceConnectionsClient client
// using a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign
// clouds, Azure stack).
    func NewVirtualApplianceConnectionsClientWithBaseURI(baseURI string, subscriptionID string) VirtualApplianceConnectionsClient {
        return VirtualApplianceConnectionsClient{ NewWithBaseURI(baseURI, subscriptionID)}
    }

// CreateOrUpdate creates a connection to Network Virtual Appliance, if it doesn't exist else updates the existing NVA
// connection'
    // Parameters:
        // resourceGroupName - the name of the resource group.
        // networkVirtualApplianceName - the name of the Network Virtual Appliance.
        // connectionName - the name of the NVA connection.
        // networkVirtualApplianceConnectionParameters - parameters supplied in an NetworkVirtualApplianceConnection
        // PUT operation.
func (client VirtualApplianceConnectionsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, networkVirtualApplianceName string, connectionName string, networkVirtualApplianceConnectionParameters VirtualApplianceConnection) (result VirtualApplianceConnectionsCreateOrUpdateFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualApplianceConnectionsClient.CreateOrUpdate")
        defer func() {
            sc := -1
        if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
        sc = result.FutureAPI.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: networkVirtualApplianceName,
         Constraints: []validation.Constraint{	{Target: "networkVirtualApplianceName", Name: validation.Pattern, Rule: `^[A-Za-z0-9_]+`, Chain: nil }}},
        { TargetValue: connectionName,
         Constraints: []validation.Constraint{	{Target: "connectionName", Name: validation.Pattern, Rule: `^[A-Za-z0-9_]+`, Chain: nil }}},
        { TargetValue: networkVirtualApplianceConnectionParameters,
         Constraints: []validation.Constraint{	{Target: "networkVirtualApplianceConnectionParameters.VirtualApplianceConnectionProperties", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "networkVirtualApplianceConnectionParameters.VirtualApplianceConnectionProperties.Asn", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "networkVirtualApplianceConnectionParameters.VirtualApplianceConnectionProperties.Asn", Name: validation.InclusiveMaximum, Rule: int64(4294967295), Chain: nil },
        	{Target: "networkVirtualApplianceConnectionParameters.VirtualApplianceConnectionProperties.Asn", Name: validation.InclusiveMinimum, Rule: int64(0), Chain: nil },
        }},
        	{Target: "networkVirtualApplianceConnectionParameters.VirtualApplianceConnectionProperties.TunnelIdentifier", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "networkVirtualApplianceConnectionParameters.VirtualApplianceConnectionProperties.TunnelIdentifier", Name: validation.InclusiveMaximum, Rule: int64(4294967295), Chain: nil },
        	{Target: "networkVirtualApplianceConnectionParameters.VirtualApplianceConnectionProperties.TunnelIdentifier", Name: validation.InclusiveMinimum, Rule: int64(0), Chain: nil },
        }},
        }}}}}); err != nil {
        return result, validation.NewError("network.VirtualApplianceConnectionsClient", "CreateOrUpdate", err.Error())
        }

        req, err := client.CreateOrUpdatePreparer(ctx, resourceGroupName, networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters)
    if err != nil {
    err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "CreateOrUpdate", nil , "Failure preparing request")
    return
    }

        result, err = client.CreateOrUpdateSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "CreateOrUpdate", result.Response(), "Failure sending request")
        return
        }

    return
}

    // CreateOrUpdatePreparer prepares the CreateOrUpdate request.
    func (client VirtualApplianceConnectionsClient) CreateOrUpdatePreparer(ctx context.Context, resourceGroupName string, networkVirtualApplianceName string, connectionName string, networkVirtualApplianceConnectionParameters VirtualApplianceConnection) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "connectionName": autorest.Encode("path",connectionName),
        "networkVirtualApplianceName": autorest.Encode("path",networkVirtualApplianceName),
        "resourceGroupName": autorest.Encode("path",resourceGroupName),
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2022-11-01"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPut(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}/networkVirtualApplianceConnections/{connectionName}",pathParameters),
autorest.WithJSON(networkVirtualApplianceConnectionParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
    // http.Response Body if it receives an error.
    func (client VirtualApplianceConnectionsClient) CreateOrUpdateSender(req *http.Request) (future VirtualApplianceConnectionsCreateOrUpdateFuture, err error) {
            var resp *http.Response
            future.FutureAPI = &azure.Future{}
            resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
            if err != nil {
            return
            }
            var azf azure.Future
            azf, err = azure.NewFutureFromResponse(resp)
            future.FutureAPI = &azf
            future.Result = future.result
            return
                }

    // CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
    // closes the http.Response Body.
    func (client VirtualApplianceConnectionsClient) CreateOrUpdateResponder(resp *http.Response) (result VirtualApplianceConnection, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Delete deletes a NVA connection.
    // Parameters:
        // resourceGroupName - the name of the resource group.
        // networkVirtualApplianceName - the name of the Network Virtual Appliance.
        // connectionName - the name of the NVA connection.
func (client VirtualApplianceConnectionsClient) Delete(ctx context.Context, resourceGroupName string, networkVirtualApplianceName string, connectionName string) (result VirtualApplianceConnectionsDeleteFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualApplianceConnectionsClient.Delete")
        defer func() {
            sc := -1
        if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
        sc = result.FutureAPI.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreparer(ctx, resourceGroupName, networkVirtualApplianceName, connectionName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "Delete", nil , "Failure preparing request")
    return
    }

        result, err = client.DeleteSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "Delete", result.Response(), "Failure sending request")
        return
        }

    return
}

    // DeletePreparer prepares the Delete request.
    func (client VirtualApplianceConnectionsClient) DeletePreparer(ctx context.Context, resourceGroupName string, networkVirtualApplianceName string, connectionName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "connectionName": autorest.Encode("path",connectionName),
        "networkVirtualApplianceName": autorest.Encode("path",networkVirtualApplianceName),
        "resourceGroupName": autorest.Encode("path",resourceGroupName),
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2022-11-01"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}/networkVirtualApplianceConnections/{connectionName}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteSender sends the Delete request. The method will close the
    // http.Response Body if it receives an error.
    func (client VirtualApplianceConnectionsClient) DeleteSender(req *http.Request) (future VirtualApplianceConnectionsDeleteFuture, err error) {
            var resp *http.Response
            future.FutureAPI = &azure.Future{}
            resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
            if err != nil {
            return
            }
            var azf azure.Future
            azf, err = azure.NewFutureFromResponse(resp)
            future.FutureAPI = &azf
            future.Result = future.result
            return
                }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client VirtualApplianceConnectionsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// Get retrieves the details of specified NVA connection.
    // Parameters:
        // resourceGroupName - the name of the resource group.
        // networkVirtualApplianceName - the name of the Network Virtual Appliance.
        // connectionName - the name of the NVA connection.
func (client VirtualApplianceConnectionsClient) Get(ctx context.Context, resourceGroupName string, networkVirtualApplianceName string, connectionName string) (result VirtualApplianceConnection, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualApplianceConnectionsClient.Get")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetPreparer(ctx, resourceGroupName, networkVirtualApplianceName, connectionName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "Get", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "Get", resp, "Failure sending request")
        return
        }

        result, err = client.GetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "Get", resp, "Failure responding to request")
        return
        }

    return
}

    // GetPreparer prepares the Get request.
    func (client VirtualApplianceConnectionsClient) GetPreparer(ctx context.Context, resourceGroupName string, networkVirtualApplianceName string, connectionName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "connectionName": autorest.Encode("path",connectionName),
        "networkVirtualApplianceName": autorest.Encode("path",networkVirtualApplianceName),
        "resourceGroupName": autorest.Encode("path",resourceGroupName),
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2022-11-01"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}/networkVirtualApplianceConnections/{connectionName}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSender sends the Get request. The method will close the
    // http.Response Body if it receives an error.
    func (client VirtualApplianceConnectionsClient) GetSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, azure.DoRetryWithRegistration(client.Client))
                }

    // GetResponder handles the response to the Get request. The method always
    // closes the http.Response Body.
    func (client VirtualApplianceConnectionsClient) GetResponder(resp *http.Response) (result VirtualApplianceConnection, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// List lists NetworkVirtualApplianceConnections under the NVA.
    // Parameters:
        // resourceGroupName - the name of the resource group.
        // networkVirtualApplianceName - the name of the Network Virtual Appliance.
func (client VirtualApplianceConnectionsClient) List(ctx context.Context, resourceGroupName string, networkVirtualApplianceName string) (result VirtualApplianceConnectionListPage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualApplianceConnectionsClient.List")
        defer func() {
            sc := -1
        if result.vacl.Response.Response != nil {
        sc = result.vacl.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: networkVirtualApplianceName,
         Constraints: []validation.Constraint{	{Target: "networkVirtualApplianceName", Name: validation.Pattern, Rule: `^[A-Za-z0-9_]+`, Chain: nil }}}}); err != nil {
        return result, validation.NewError("network.VirtualApplianceConnectionsClient", "List", err.Error())
        }

            result.fn = client.listNextResults
    req, err := client.ListPreparer(ctx, resourceGroupName, networkVirtualApplianceName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "List", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListSender(req)
        if err != nil {
        result.vacl.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "List", resp, "Failure sending request")
        return
        }

        result.vacl, err = client.ListResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "List", resp, "Failure responding to request")
        return
        }
            if result.vacl.hasNextLink() && result.vacl.IsEmpty() {
            err = result.NextWithContext(ctx)
            return
            }

    return
}

    // ListPreparer prepares the List request.
    func (client VirtualApplianceConnectionsClient) ListPreparer(ctx context.Context, resourceGroupName string, networkVirtualApplianceName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "networkVirtualApplianceName": autorest.Encode("path",networkVirtualApplianceName),
        "resourceGroupName": autorest.Encode("path",resourceGroupName),
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2022-11-01"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}/networkVirtualApplianceConnections",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListSender sends the List request. The method will close the
    // http.Response Body if it receives an error.
    func (client VirtualApplianceConnectionsClient) ListSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, azure.DoRetryWithRegistration(client.Client))
                }

    // ListResponder handles the response to the List request. The method always
    // closes the http.Response Body.
    func (client VirtualApplianceConnectionsClient) ListResponder(resp *http.Response) (result VirtualApplianceConnectionList, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listNextResults retrieves the next set of results, if any.
            func (client VirtualApplianceConnectionsClient) listNextResults(ctx context.Context, lastResults VirtualApplianceConnectionList) (result VirtualApplianceConnectionList, err error) {
            req, err := lastResults.virtualApplianceConnectionListPreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "listNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "listNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.VirtualApplianceConnectionsClient", "listNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListComplete enumerates all values, automatically crossing page boundaries as required.
            func (client VirtualApplianceConnectionsClient) ListComplete(ctx context.Context, resourceGroupName string, networkVirtualApplianceName string) (result VirtualApplianceConnectionListIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/VirtualApplianceConnectionsClient.List")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.List(ctx, resourceGroupName, networkVirtualApplianceName)
                            return
            }

